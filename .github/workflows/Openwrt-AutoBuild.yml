name: Openwrt-AutoBuild

on:
  push:
    branches:
      - main
  schedule:
    - cron: 0 20 * * *
#  release:
#    types: [published]

env:
  RUN_VALIDATION: true

jobs:
  build:
    runs-on:  ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: Build ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        target: [x64-Default,x64-Lite]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

 
    - name: 加载脚本设置
      run: |    
        source "${GITHUB_WORKSPACE}/user/${{ matrix.target }}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "UPLOAD_PACKAGES_DIR=${UPLOAD_PACKAGES_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_TARGETS_DIR=${UPLOAD_TARGETS_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_TO_ARTIFACTS=${UPLOAD_TO_ARTIFACTS}" >> $GITHUB_ENV
        echo "UPLOAD_TO_REALEASE=${UPLOAD_TO_REALEASE}" >> $GITHUB_ENV
        echo "UPLOAD_TO_COWTRANSFER=${UPLOAD_TO_COWTRANSFER}" >> $GITHUB_ENV
        echo "WECHAT_NOTIFICATION=${WECHAT_NOTIFICATION}" >> $GITHUB_ENV
        echo "DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
        echo "FILE_PREFIX=OpenWRT_" >> $GITHUB_ENV
        
        echo "PACKAGES_DIR=${GITHUB_WORKSPACE}/Packages/" >> $GITHUB_ENV
        echo "PACKAGES_TAR=${GITHUB_WORKSPACE}/Packages/${{ env.FILE_PREFIX }}${{ matrix.target }}_Packages.tar" >> $GITHUB_ENV
       
        echo "TARGETS_DIR=${GITHUB_WORKSPACE}/Targets/" >> $GITHUB_ENV
        echo "TARGETS_TAR=${GITHUB_WORKSPACE}/Targets/${{ env.FILE_PREFIX }}${{ matrix.target }}_Targets.tar" >> $GITHUB_ENV
       
        echo "FIRMWARE_DIR=${GITHUB_WORKSPACE}/Firmware/" >> $GITHUB_ENV
       
        echo "FIRMWARE_TAR=${GITHUB_WORKSPACE}/Firmware/${{ env.FILE_PREFIX }}${{ matrix.target }}_Firmware.tar" >> $GITHUB_ENV       
        echo "FIRMWARE_IMG=${GITHUB_WORKSPACE}/Firmware/${{ env.FILE_PREFIX }}${{ matrix.target }}_Firmware.img" >> $GITHUB_ENV
        echo "FIRMWARE_EFI_IMG=${GITHUB_WORKSPACE}/Firmware/${{ env.FILE_PREFIX }}${{ matrix.target }}_EFI_Firmware.img" >> $GITHUB_ENV
        echo "CONFIG=${GITHUB_WORKSPACE}/Firmware/${{ env.FILE_PREFIX }}${{ matrix.target }}_Config.txt" >> $GITHUB_ENV
        echo "FEEDS=${GITHUB_WORKSPACE}/Firmware/${{ env.FILE_PREFIX }}${{ matrix.target }}_Feeds.txt" >> $GITHUB_ENV
    
    - name: 开始安装编译所需系统
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: 下载源码
      run: |
        git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
        
    - name: 应用补丁
      run: | 
        echo "Apply patches"
        if [ -n "$(ls -A "user/common/patches" 2>/dev/null)" ]; then
        (
          find "user/common/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d 'openwrt' -p0 --forward"
        )
        fi
        if [ -n "$(ls -A "user/${{ matrix.target }}/patches" 2>/dev/null)" ]; then
        (
          find "user/${{ matrix.target }}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d 'openwrt' -p0 --forward"
        )
        fi         

    - name: 更新源
      run: cd openwrt && ./scripts/feeds update -a
      
    - name: 安装源
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |        
         echo "Apply files..."
         if [ -n "$(ls -A "user/common/files" 2>/dev/null)" ]; then
         cp -r -f user/common/files/* openwrt/package/base-files/files/
         fi
         if [ -n "$(ls -A "user/${{ matrix.target }}/files" 2>/dev/null)" ]; then
         cp -r -f user/${{ matrix.target }}/files/* openwrt/package/base-files/files/
         fi
        
         echo "Apply common custom.sh"
         if [ -f "user/common/custom.sh" ]; then
         (
           cd openwrt
           /bin/bash "../user/common/custom.sh"
         )
         fi       
         if [ -f "user/${{ matrix.target }}/custom.sh" ]; then
         (
           cd openwrt
           /bin/bash "../user/${{ matrix.target }}/custom.sh"
         )         
         fi
         if [ -f "user/${{ matrix.target }}/config.diff" ]; then
         (
           cp -r -f user/${{ matrix.target }}/config.diff openwrt/.config
         )
         fi
         
    #- name: Download latest config
    #  run: |
    #    cd openwrt
    #    curl -skL https://raw.githubusercontent.com/Netings/Actions-OpenWrt/main/user/${{ matrix.target }}/config.diff -o .config
        
    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "3 thread compile"
        make -j3 || make -j1 V=s
        echo "::set-output name=status::success"

    - name:  分类打包软件、固件
      if: steps.compile.outputs.status == 'success'
      run: |
        echo "Pack Packages Dir"
        rm -rf ${{ env.PACKAGES_DIR }}
        mkdir -p ${{ env.PACKAGES_DIR }}
        
        cp -rf openwrt/bin/packages/x86_64/* ${{ env.PACKAGES_DIR }}
        tar -cvf ${{ env.PACKAGES_TAR }} ${{ env.PACKAGES_DIR }}

        echo "Pack Targets Dir"
        rm -rf ${{ env.TARGETS_DIR }}
        mkdir -p ${{ env.TARGETS_DIR }}
               

        rm -rf openwrt/bin/targets/x86/64/*rootfs*
        rm -rf openwrt/bin/targets/x86/64/*kernel.bin*
        rm -rf openwrt/bin/targets/x86/64/packages
        cp -rf openwrt/bin/targets/x86/64/* ${{ env.TARGETS_DIR }}
        tar -cvf  ${{ env.TARGETS_TAR }} ${{ env.TARGETS_DIR }}

        echo "Assemble Firmware"
        rm -rf ${{ env.FIRMWARE_DIR }}
        mkdir -p ${{ env.FIRMWARE_DIR }}
        
        find openwrt/bin/targets/ -name "*sysupgrade*bin*" | xargs -i mv -f {} ${{ env.FIRMWARE_DIR }}
        find openwrt/bin/targets/ -name "*combined*img*" | xargs -i mv -f {} ${{ env.FIRMWARE_DIR }}
        find openwrt/bin/targets/ -name "config.buildinfo" | xargs -i mv -f {} ${{ env.FIRMWARE_DIR }}
        find openwrt/bin/targets/ -name "feeds.buildinfo" | xargs -i mv -f {} ${{ env.FIRMWARE_DIR }}
        find ${{ env.FIRMWARE_DIR }} -name "*combined.img*" | xargs -i mv -f {} ${{ env.FIRMWARE_IMG }}
        find ${{ env.FIRMWARE_DIR }} -name "*combined-efi.img*" | xargs -i mv -f {} ${{ env.FIRMWARE_EFI_IMG }}
        mv -f ${{ env.FIRMWARE_DIR }}config.buildinfo ${{ env.CONFIG }}
        mv -f ${{ env.FIRMWARE_DIR }}feeds.buildinfo ${{ env.FEEDS }}
        tar -cvf  ${{ env.env.FIRMWARE_TAR }} ${{ env.FIRMWARE_DIR }}
        
    - name: 上传软件包到Release
      if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_REALEASE == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.PACKAGES_TAR }}
        asset_name: ${{ env.PACKAGES_TAR }}
        tag: ${{ env.DATE }}
        overwrite: true
        file_glob: true

    - name: 上传镜像包到Release
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_REALEASE == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.TARGETS_TAR }}
        asset_name: ${{ env.TARGETS_TAR }}
        tag: ${{ env.DATE }}
        overwrite: true
        file_glob: true

    - name: 上传固件到Release
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_REALEASE == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.FIRMWARE_IMG }}
        asset_name: ${{ env.FIRMWARE_IMG }}
        tag: ${{ env.DATE }}
        overwrite: true
        file_glob: true

    - name: 上传EFI固件到Release
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_REALEASE == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.FIRMWARE_EFI_IMG }}
        asset_name: ${{ env.FIRMWARE_EFI_IMG }}
        tag: ${{ env.DATE }}
        overwrite: true
        file_glob: true

    - name: 上传Config到Release
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_REALEASE == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.CONFIG }}
        asset_name: ${{ env.CONFIG }}
        tag: ${{ env.DATE }}
        overwrite: true
        file_glob: true

    - name: 上传Feeds到Release
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_REALEASE == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.FEEDS }}
        asset_name: ${{ env.FEEDS }}
        tag: ${{ env.DATE }}
        overwrite: true
        file_glob: true  

    - name: 上传软件包到Actions
      if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled()　&& steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.FILE_PREFIX }}${{ matrix.target }}_Packages
        path: openwrt/bin/packages
        
    - name: 上传镜像包到Actions
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.FILE_PREFIX }}${{ matrix.target }}_Targets
        path: openwrt/bin/targets
        
    - name: 上传固件到Actions
      if: env.UPLOAD_FIRMWARE == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.FILE_PREFIX }}${{ matrix.target }}_Firmware
        path: ./Firmware/${{ env.FILE_PREFIX }}${{ matrix.target }}_Firmware
        
    - name: 上传EFI固件到Actions
      if: env.UPLOAD_FIRMWARE == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.FILE_PREFIX }}${{ matrix.target }}_EFI_Firmware.img
        path: ./Firmware/${{ env.FILE_PREFIX }}${{ matrix.target }}_EFI_Firmware.img

    - name: 上传固件到「奶牛快传」和「WeTransfer」
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_COWTRANSFER == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${{ env.TARGETS_TAR }} 2>&1 | tee cowtransfer.log
        echo "::warning file=奶牛快传（${{matrix.target}}）::$(cat cowtransfer.log | grep https)"
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${{ env.TARGETS_TAR }} 2>&1 | tee wetransfer.log
        echo "::warning file=WeTransfer（${{matrix.target}}）::$(cat wetransfer.log | grep https)"
    
    - name: 提取发布用的「奶牛快传」跟「WeTransfer」的链接
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_COWTRANSFER == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${{ env.TARGETS_TAR }} 2>&1 | tee cowtransfer.log
        echo "COWTRANSFER_URL=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_ENV
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${{ env.TARGETS_TAR }} 2>&1 | tee wetransfer.log
        echo "WETRANSFER_URL=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_ENV

    - name: 微信消息通知
      if: env.WECHAT_NOTIFICATION == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      run: curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=${{ matrix.target }}编译完成

    - name: Delete workflow runs
      uses: ActionsRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
